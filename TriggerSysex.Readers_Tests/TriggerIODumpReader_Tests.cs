using System;
using System.Collections.Generic;
using System.IO.Abstractions;
using System.IO.Abstractions.TestingHelpers;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using NUnit.Framework;
using TriggerSysex.Objects;
using TriggerSysex.Objects.Enums;
using TriggerSysex.Readers;

namespace TriggerSysex.Readers_Tests
{
    [TestFixture]
    public class TriggerIODumpReader_Tests
    {
        private TriggerIODumpReader _target;
        private IFileSystem _mockFileSystem;
        [SetUp]
        public void SetUp()
        {
            _target = new TriggerIODumpReader();
            _mockFileSystem = new MockFileSystem();
            //_target.FileSystem = _mockFileSystem;
        }

        [Test]
        public void Read_ReadsFiles_Test()
        {
            var actual = _target.Read(@"TestData\dump.syx");

        }

        [Test]
        public void Read_ReadsPrograms_Test()
        {
            var actual = _target.Read(rawData);
            
            var doesNotHaveMagicNumbers = actual.ProgramRecords.Where(x => x.UnknownMagicNumber != 0x3);
            var allHaveProgramNumbers = actual.ProgramRecords.All(x => x.ProgramNumber <= 20);
            Assert.IsFalse(doesNotHaveMagicNumbers.Any());
            Assert.IsTrue(allHaveProgramNumbers);
            //var actual = _target.Read(@".\TestData\dump.syx");

        }

        [Test]
        public void Read_ReadsTriggers_Tests()
        {
            var actual = _target.Read(rawData);
            var allTriggersMeetSpecs =
                actual.TriggerRecords.Where(x => x.Header.Length == TriggerIOConstants.TriggerHeaderConstant.Length
                && (TriggerNumber)x.TriggerNumber >= TriggerNumber.KickA && (TriggerNumber)x.TriggerNumber <= TriggerNumber.Trigger10B
                );
            Assert.AreEqual(allTriggersMeetSpecs.Count(), actual.TriggerRecords.Count());
            var z = default(TriggerNumber);
        }

        [Test]
        public void Read_ReadsProgramsInSequence_Test()
        {
            var expected = _target.Read(rawData).ProgramRecords.Select(x => x.ProgramNumber).ToArray();
            var actual = _target.Read(rawData).ProgramRecords.Select(x => x.ProgramNumber).OrderBy(x => x).ToArray();
            Assert.AreEqual(expected.Select((x,y) => expected[y]), actual.Select((x,y) => actual[y]));
        }


    #region testdata
        #region raw bytes
        readonly byte[] rawData = {
	0xF0, 0x00, 0x00, 0x0E, 0x2C, 0x0D, 0x00, 0x00, 0x46, 0x01, 0x00, 0x09,
	0x07, 0x03, 0x09, 0x23, 0x03, 0x09, 0x26, 0x03, 0x09, 0x28, 0x03, 0x09,
	0x2D, 0x03, 0x09, 0x30, 0x03, 0x09, 0x37, 0x03, 0x09, 0x36, 0x03, 0x08,
	0x2E, 0x03, 0x09, 0x23, 0x03, 0x09, 0x2D, 0x03, 0x09, 0x01, 0x03, 0x09,
	0x2B, 0x03, 0x09, 0x23, 0x03, 0x09, 0x31, 0x03, 0x09, 0x3A, 0x03, 0x09,
	0x37, 0x03, 0x09, 0x23, 0x03, 0x09, 0x35, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x2C, 0x03, 0x2A, 0x01, 0x7F, 0xF7, 0xF0, 0x00, 0x00, 0x0E, 0x2C, 0x0D,
	0x00, 0x00, 0x46, 0x01, 0x01, 0x09, 0x23, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x26, 0x03, 0x09, 0x25, 0x03, 0x09, 0x2E, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x33, 0x03, 0x09, 0x35, 0x03, 0x09, 0x32, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x30, 0x03, 0x09, 0x23, 0x03, 0x09, 0x2D, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x31, 0x03, 0x09, 0x23, 0x03, 0x09, 0x37, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x34, 0x03, 0x09, 0x23, 0x03, 0x09, 0x2C, 0x03, 0x2A, 0x01, 0x7F, 0xF7,
	0xF0, 0x00, 0x00, 0x0E, 0x2C, 0x0D, 0x00, 0x00, 0x46, 0x01, 0x02, 0x09,
	0x23, 0x03, 0x09, 0x23, 0x03, 0x09, 0x3C, 0x03, 0x09, 0x3D, 0x03, 0x09,
	0x46, 0x03, 0x09, 0x23, 0x03, 0x09, 0x43, 0x03, 0x09, 0x44, 0x03, 0x09,
	0x3E, 0x03, 0x09, 0x23, 0x03, 0x09, 0x3F, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x40, 0x03, 0x09, 0x23, 0x03, 0x09, 0x3A, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x4B, 0x03, 0x09, 0x23, 0x03, 0x09, 0x51, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x23, 0x03, 0x2A, 0x01, 0x00, 0xF7, 0xF0, 0x00, 0x00, 0x0E, 0x2C, 0x0D,
	0x00, 0x00, 0x46, 0x01, 0x03, 0x00, 0x3C, 0x03, 0x00, 0x3D, 0x03, 0x00,
	0x3E, 0x03, 0x00, 0x3F, 0x03, 0x00, 0x40, 0x03, 0x00, 0x41, 0x03, 0x00,
	0x42, 0x03, 0x00, 0x43, 0x03, 0x00, 0x44, 0x03, 0x00, 0x45, 0x03, 0x00,
	0x46, 0x03, 0x00, 0x47, 0x03, 0x00, 0x48, 0x03, 0x00, 0x49, 0x03, 0x00,
	0x4A, 0x03, 0x00, 0x4B, 0x03, 0x00, 0x4C, 0x03, 0x00, 0x4D, 0x03, 0x00,
	0x4E, 0x03, 0x00, 0x4F, 0x03, 0x00, 0x23, 0x03, 0x2A, 0x01, 0x00, 0xF7,
	0xF0, 0x00, 0x00, 0x0E, 0x2C, 0x0D, 0x00, 0x00, 0x46, 0x01, 0x04, 0x00,
	0x30, 0x03, 0x00, 0x31, 0x03, 0x00, 0x32, 0x03, 0x00, 0x33, 0x03, 0x00,
	0x34, 0x03, 0x00, 0x35, 0x03, 0x00, 0x36, 0x03, 0x00, 0x37, 0x03, 0x00,
	0x38, 0x03, 0x00, 0x39, 0x03, 0x00, 0x3A, 0x03, 0x00, 0x3B, 0x03, 0x00,
	0x3C, 0x03, 0x00, 0x3D, 0x03, 0x00, 0x3E, 0x03, 0x00, 0x3F, 0x03, 0x00,
	0x40, 0x03, 0x00, 0x41, 0x03, 0x00, 0x42, 0x03, 0x00, 0x43, 0x03, 0x00,
	0x23, 0x03, 0x2A, 0x01, 0x00, 0xF7, 0xF0, 0x00, 0x00, 0x0E, 0x2C, 0x0D,
	0x00, 0x00, 0x46, 0x01, 0x05, 0x09, 0x23, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x26, 0x03, 0x09, 0x28, 0x03, 0x09, 0x2E, 0x03, 0x09, 0x30, 0x03, 0x09,
	0x37, 0x03, 0x09, 0x36, 0x03, 0x09, 0x2F, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x2D, 0x03, 0x09, 0x23, 0x03, 0x09, 0x2B, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x31, 0x03, 0x09, 0x3A, 0x03, 0x09, 0x37, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x35, 0x03, 0x09, 0x23, 0x03, 0x09, 0x2C, 0x03, 0x2A, 0x01, 0x00, 0xF7,
	0xF0, 0x00, 0x00, 0x0E, 0x2C, 0x0D, 0x00, 0x00, 0x46, 0x01, 0x06, 0x09,
	0x23, 0x03, 0x09, 0x23, 0x03, 0x09, 0x26, 0x03, 0x09, 0x28, 0x03, 0x09,
	0x2E, 0x03, 0x09, 0x30, 0x03, 0x09, 0x37, 0x03, 0x09, 0x36, 0x03, 0x09,
	0x2F, 0x03, 0x09, 0x23, 0x03, 0x09, 0x2D, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x2B, 0x03, 0x09, 0x23, 0x03, 0x09, 0x31, 0x03, 0x09, 0x3A, 0x03, 0x09,
	0x37, 0x03, 0x09, 0x23, 0x03, 0x09, 0x35, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x2C, 0x03, 0x2A, 0x01, 0x00, 0xF7, 0xF0, 0x00, 0x00, 0x0E, 0x2C, 0x0D,
	0x00, 0x00, 0x46, 0x01, 0x07, 0x09, 0x23, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x26, 0x03, 0x09, 0x28, 0x03, 0x09, 0x2E, 0x03, 0x09, 0x30, 0x03, 0x09,
	0x37, 0x03, 0x09, 0x36, 0x03, 0x09, 0x2F, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x2D, 0x03, 0x09, 0x23, 0x03, 0x09, 0x2B, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x31, 0x03, 0x09, 0x3A, 0x03, 0x09, 0x37, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x35, 0x03, 0x09, 0x23, 0x03, 0x09, 0x2C, 0x03, 0x2A, 0x01, 0x00, 0xF7,
	0xF0, 0x00, 0x00, 0x0E, 0x2C, 0x0D, 0x00, 0x00, 0x46, 0x01, 0x08, 0x09,
	0x23, 0x03, 0x09, 0x23, 0x03, 0x09, 0x26, 0x03, 0x09, 0x28, 0x03, 0x09,
	0x2E, 0x03, 0x09, 0x30, 0x03, 0x09, 0x37, 0x03, 0x09, 0x36, 0x03, 0x09,
	0x2F, 0x03, 0x09, 0x23, 0x03, 0x09, 0x2D, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x2B, 0x03, 0x09, 0x23, 0x03, 0x09, 0x31, 0x03, 0x09, 0x3A, 0x03, 0x09,
	0x37, 0x03, 0x09, 0x23, 0x03, 0x09, 0x35, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x2C, 0x03, 0x2A, 0x01, 0x00, 0xF7, 0xF0, 0x00, 0x00, 0x0E, 0x2C, 0x0D,
	0x00, 0x00, 0x46, 0x01, 0x09, 0x09, 0x23, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x26, 0x03, 0x09, 0x28, 0x03, 0x09, 0x2E, 0x03, 0x09, 0x30, 0x03, 0x09,
	0x37, 0x03, 0x09, 0x36, 0x03, 0x09, 0x2F, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x2D, 0x03, 0x09, 0x23, 0x03, 0x09, 0x2B, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x31, 0x03, 0x09, 0x3A, 0x03, 0x09, 0x37, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x35, 0x03, 0x09, 0x23, 0x03, 0x09, 0x2C, 0x03, 0x2A, 0x01, 0x00, 0xF7,
	0xF0, 0x00, 0x00, 0x0E, 0x2C, 0x0D, 0x00, 0x00, 0x46, 0x01, 0x0A, 0x09,
	0x23, 0x03, 0x09, 0x23, 0x03, 0x09, 0x26, 0x03, 0x09, 0x28, 0x03, 0x09,
	0x2E, 0x03, 0x09, 0x30, 0x03, 0x09, 0x37, 0x03, 0x09, 0x36, 0x03, 0x09,
	0x2F, 0x03, 0x09, 0x23, 0x03, 0x09, 0x2D, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x2B, 0x03, 0x09, 0x23, 0x03, 0x09, 0x31, 0x03, 0x09, 0x3A, 0x03, 0x09,
	0x37, 0x03, 0x09, 0x23, 0x03, 0x09, 0x35, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x2C, 0x03, 0x2A, 0x01, 0x00, 0xF7, 0xF0, 0x00, 0x00, 0x0E, 0x2C, 0x0D,
	0x00, 0x00, 0x46, 0x01, 0x0B, 0x09, 0x23, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x26, 0x03, 0x09, 0x28, 0x03, 0x09, 0x2E, 0x03, 0x09, 0x30, 0x03, 0x09,
	0x37, 0x03, 0x09, 0x36, 0x03, 0x09, 0x2F, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x2D, 0x03, 0x09, 0x23, 0x03, 0x09, 0x2B, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x31, 0x03, 0x09, 0x3A, 0x03, 0x09, 0x37, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x35, 0x03, 0x09, 0x23, 0x03, 0x09, 0x2C, 0x03, 0x2A, 0x01, 0x00, 0xF7,
	0xF0, 0x00, 0x00, 0x0E, 0x2C, 0x0D, 0x00, 0x00, 0x46, 0x01, 0x0C, 0x09,
	0x23, 0x03, 0x09, 0x23, 0x03, 0x09, 0x26, 0x03, 0x09, 0x28, 0x03, 0x09,
	0x2E, 0x03, 0x09, 0x30, 0x03, 0x09, 0x37, 0x03, 0x09, 0x36, 0x03, 0x09,
	0x2F, 0x03, 0x09, 0x23, 0x03, 0x09, 0x2D, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x2B, 0x03, 0x09, 0x23, 0x03, 0x09, 0x31, 0x03, 0x09, 0x3A, 0x03, 0x09,
	0x37, 0x03, 0x09, 0x23, 0x03, 0x09, 0x35, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x2C, 0x03, 0x2A, 0x01, 0x00, 0xF7, 0xF0, 0x00, 0x00, 0x0E, 0x2C, 0x0D,
	0x00, 0x00, 0x46, 0x01, 0x0D, 0x09, 0x23, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x26, 0x03, 0x09, 0x28, 0x03, 0x09, 0x2E, 0x03, 0x09, 0x30, 0x03, 0x09,
	0x37, 0x03, 0x09, 0x36, 0x03, 0x09, 0x2F, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x2D, 0x03, 0x09, 0x23, 0x03, 0x09, 0x2B, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x31, 0x03, 0x09, 0x3A, 0x03, 0x09, 0x37, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x35, 0x03, 0x09, 0x23, 0x03, 0x09, 0x2C, 0x03, 0x2A, 0x01, 0x00, 0xF7,
	0xF0, 0x00, 0x00, 0x0E, 0x2C, 0x0D, 0x00, 0x00, 0x46, 0x01, 0x0E, 0x09,
	0x23, 0x03, 0x09, 0x23, 0x03, 0x09, 0x26, 0x03, 0x09, 0x28, 0x03, 0x09,
	0x2E, 0x03, 0x09, 0x30, 0x03, 0x09, 0x37, 0x03, 0x09, 0x36, 0x03, 0x09,
	0x2F, 0x03, 0x09, 0x23, 0x03, 0x09, 0x2D, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x2B, 0x03, 0x09, 0x23, 0x03, 0x09, 0x31, 0x03, 0x09, 0x3A, 0x03, 0x09,
	0x37, 0x03, 0x09, 0x23, 0x03, 0x09, 0x35, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x2C, 0x03, 0x2A, 0x01, 0x00, 0xF7, 0xF0, 0x00, 0x00, 0x0E, 0x2C, 0x0D,
	0x00, 0x00, 0x46, 0x01, 0x0F, 0x09, 0x23, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x26, 0x03, 0x09, 0x28, 0x03, 0x09, 0x2E, 0x03, 0x09, 0x30, 0x03, 0x09,
	0x37, 0x03, 0x09, 0x36, 0x03, 0x09, 0x2F, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x2D, 0x03, 0x09, 0x23, 0x03, 0x09, 0x2B, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x31, 0x03, 0x09, 0x3A, 0x03, 0x09, 0x37, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x35, 0x03, 0x09, 0x23, 0x03, 0x09, 0x2C, 0x03, 0x2A, 0x01, 0x00, 0xF7,
	0xF0, 0x00, 0x00, 0x0E, 0x2C, 0x0D, 0x00, 0x00, 0x46, 0x01, 0x10, 0x09,
	0x23, 0x03, 0x09, 0x23, 0x03, 0x09, 0x26, 0x03, 0x09, 0x28, 0x03, 0x09,
	0x2E, 0x03, 0x09, 0x30, 0x03, 0x09, 0x37, 0x03, 0x09, 0x36, 0x03, 0x09,
	0x2F, 0x03, 0x09, 0x23, 0x03, 0x09, 0x2D, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x2B, 0x03, 0x09, 0x23, 0x03, 0x09, 0x31, 0x03, 0x09, 0x3A, 0x03, 0x09,
	0x37, 0x03, 0x09, 0x23, 0x03, 0x09, 0x35, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x2C, 0x03, 0x2A, 0x01, 0x00, 0xF7, 0xF0, 0x00, 0x00, 0x0E, 0x2C, 0x0D,
	0x00, 0x00, 0x46, 0x01, 0x11, 0x09, 0x23, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x26, 0x03, 0x09, 0x28, 0x03, 0x09, 0x2E, 0x03, 0x09, 0x30, 0x03, 0x09,
	0x37, 0x03, 0x09, 0x36, 0x03, 0x09, 0x2F, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x2D, 0x03, 0x09, 0x23, 0x03, 0x09, 0x2B, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x31, 0x03, 0x09, 0x3A, 0x03, 0x09, 0x37, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x35, 0x03, 0x09, 0x23, 0x03, 0x09, 0x2C, 0x03, 0x2A, 0x01, 0x00, 0xF7,
	0xF0, 0x00, 0x00, 0x0E, 0x2C, 0x0D, 0x00, 0x00, 0x46, 0x01, 0x12, 0x09,
	0x23, 0x03, 0x09, 0x23, 0x03, 0x09, 0x26, 0x03, 0x09, 0x28, 0x03, 0x09,
	0x2E, 0x03, 0x09, 0x30, 0x03, 0x09, 0x37, 0x03, 0x09, 0x36, 0x03, 0x09,
	0x2F, 0x03, 0x09, 0x23, 0x03, 0x09, 0x2D, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x2B, 0x03, 0x09, 0x23, 0x03, 0x09, 0x31, 0x03, 0x09, 0x3A, 0x03, 0x09,
	0x37, 0x03, 0x09, 0x23, 0x03, 0x09, 0x35, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x2C, 0x03, 0x2A, 0x01, 0x00, 0xF7, 0xF0, 0x00, 0x00, 0x0E, 0x2C, 0x0D,
	0x00, 0x00, 0x46, 0x01, 0x13, 0x09, 0x23, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x26, 0x03, 0x09, 0x28, 0x03, 0x08, 0x2D, 0x03, 0x09, 0x30, 0x03, 0x09,
	0x37, 0x03, 0x09, 0x36, 0x03, 0x09, 0x2F, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x2D, 0x03, 0x09, 0x23, 0x03, 0x09, 0x2B, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x31, 0x03, 0x09, 0x3A, 0x03, 0x09, 0x37, 0x03, 0x09, 0x23, 0x03, 0x09,
	0x35, 0x03, 0x09, 0x23, 0x03, 0x09, 0x2C, 0x03, 0x2A, 0x00, 0x7F, 0xF7,
	0xF0, 0x00, 0x00, 0x0E, 0x2C, 0x0D, 0x00, 0x00, 0x46, 0x01, 0x14, 0x09,
	0x0A, 0x00, 0x09, 0x0B, 0x06, 0x09, 0x14, 0x0D, 0x09, 0x15, 0x13, 0x09,
	0x1E, 0x1A, 0x09, 0x1F, 0x21, 0x09, 0x28, 0x27, 0x09, 0x29, 0x2E, 0x09,
	0x32, 0x35, 0x09, 0x33, 0x3B, 0x09, 0x3C, 0x42, 0x09, 0x3D, 0x48, 0x09,
	0x46, 0x4F, 0x09, 0x47, 0x56, 0x09, 0x50, 0x5C, 0x09, 0x51, 0x63, 0x09,
	0x5A, 0x6A, 0x09, 0x5B, 0x70, 0x09, 0x64, 0x77, 0x09, 0x65, 0x7E, 0x09,
	0x2C, 0x7F, 0x2A, 0x00, 0x14, 0xF7, 0xF0, 0x00, 0x00, 0x0E, 0x2C, 0x0D,
	0x00, 0x00, 0x0A, 0x02, 0x00, 0x04, 0x0D, 0x03, 0x00, 0x32, 0x00, 0xF7,
	0xF0, 0x00, 0x00, 0x0E, 0x2C, 0x0D, 0x00, 0x00, 0x0A, 0x02, 0x01, 0x0F,
	0x06, 0x05, 0x01, 0x0A, 0x00, 0xF7, 0xF0, 0x00, 0x00, 0x0E, 0x2C, 0x0D,
	0x00, 0x00, 0x0A, 0x02, 0x02, 0x07, 0x07, 0x06, 0x01, 0x0A, 0x02, 0xF7,
	0xF0, 0x00, 0x00, 0x0E, 0x2C, 0x0D, 0x00, 0x00, 0x0A, 0x02, 0x03, 0x13,
	0x01, 0x05, 0x01, 0x0A, 0x00, 0xF7, 0xF0, 0x00, 0x00, 0x0E, 0x2C, 0x0D,
	0x00, 0x00, 0x0A, 0x02, 0x04, 0x05, 0x07, 0x05, 0x03, 0x09, 0x02, 0xF7,
	0xF0, 0x00, 0x00, 0x0E, 0x2C, 0x0D, 0x00, 0x00, 0x0A, 0x02, 0x05, 0x0F,
	0x06, 0x05, 0x03, 0x0B, 0x00, 0xF7, 0xF0, 0x00, 0x00, 0x0E, 0x2C, 0x0D,
	0x00, 0x00, 0x0A, 0x02, 0x06, 0x0F, 0x06, 0x05, 0x01, 0x0A, 0x02, 0xF7,
	0xF0, 0x00, 0x00, 0x0E, 0x2C, 0x0D, 0x00, 0x00, 0x0A, 0x02, 0x07, 0x0F,
	0x06, 0x05, 0x01, 0x0A, 0x02, 0xF7, 0xF0, 0x00, 0x00, 0x0E, 0x2C, 0x0D,
	0x00, 0x00, 0x0A, 0x02, 0x08, 0x06, 0x06, 0x3D, 0x01, 0x0E, 0x04, 0xF7,
	0xF0, 0x00, 0x00, 0x0E, 0x2C, 0x0D, 0x00, 0x00, 0x0A, 0x02, 0x09, 0x00,
	0x07, 0x05, 0x01, 0x0A, 0x00, 0xF7, 0xF0, 0x00, 0x00, 0x0E, 0x2C, 0x0D,
	0x00, 0x00, 0x0A, 0x02, 0x0A, 0x07, 0x09, 0x04, 0x07, 0x0A, 0x01, 0xF7,
	0xF0, 0x00, 0x00, 0x0E, 0x2C, 0x0D, 0x00, 0x00, 0x0A, 0x02, 0x0B, 0x0C,
	0x07, 0x05, 0x01, 0x0A, 0x00, 0xF7, 0xF0, 0x00, 0x00, 0x0E, 0x2C, 0x0D,
	0x00, 0x00, 0x0A, 0x02, 0x0C, 0x07, 0x08, 0x04, 0x01, 0x0A, 0x02, 0xF7,
	0xF0, 0x00, 0x00, 0x0E, 0x2C, 0x0D, 0x00, 0x00, 0x0A, 0x02, 0x0D, 0x0B,
	0x06, 0x05, 0x01, 0x0A, 0x00, 0xF7, 0xF0, 0x00, 0x00, 0x0E, 0x2C, 0x0D,
	0x00, 0x00, 0x0A, 0x02, 0x0E, 0x08, 0x0E, 0x23, 0x02, 0x0A, 0x02, 0xF7,
	0xF0, 0x00, 0x00, 0x0E, 0x2C, 0x0D, 0x00, 0x00, 0x0A, 0x02, 0x0F, 0x10,
	0x06, 0x05, 0x01, 0x0A, 0x00, 0xF7, 0xF0, 0x00, 0x00, 0x0E, 0x2C, 0x0D,
	0x00, 0x00, 0x0A, 0x02, 0x10, 0x08, 0x01, 0x23, 0x05, 0x0A, 0x02, 0xF7,
	0xF0, 0x00, 0x00, 0x0E, 0x2C, 0x0D, 0x00, 0x00, 0x0A, 0x02, 0x11, 0x00,
	0x04, 0x40, 0x01, 0x0A, 0x00, 0xF7, 0xF0, 0x00, 0x00, 0x0E, 0x2C, 0x0D,
	0x00, 0x00, 0x0A, 0x02, 0x12, 0x08, 0x0A, 0x40, 0x04, 0x0A, 0x02, 0xF7,
	0xF0, 0x00, 0x00, 0x0E, 0x2C, 0x0D, 0x00, 0x00, 0x0A, 0x02, 0x13, 0x00,
	0x04, 0x13, 0x06, 0x0A, 0x00, 0xF7, 0xF0, 0x00, 0x00, 0x0E, 0x2C, 0x0D,
	0x00, 0x00, 0x0A, 0x02, 0x14, 0x05, 0x0C, 0x19, 0x06, 0x28, 0x05, 0xF7
};
        #endregion

        #region test structure

        private SysexDump testSysexDump = new SysexDump()
        {
            ProgramRecords = BuildProgramRecords(),
            TriggerRecords = BuildTriggerRecords()
        };

        private static TriggerRecord[] BuildTriggerRecords()
        {
            return new TriggerRecord[20];
        }

        private static ProgramRecord[] BuildProgramRecords()
        {
            var result = new ProgramRecord[21];

            
            foreach (var i in Enumerable.Range(0x0, 0x14).Select(x => (byte)x))
            {
                var record = new ProgramRecord();
                record.Header = TriggerIOConstants.ProgramHeaderConstant;
                record.ProgramNumber = (byte)(i - 1);
                record.OpenHiHatMidiChannel = 9;
                record.OpenHiHatNote = (byte) MidiPercussionMap.OpenHiHat;
                
                record.Footer = TriggerIOConstants.FooterConstant;
                result[i] = record;
            }
                
            

            return result;
        }

        #endregion
    #endregion
    }
    
}
